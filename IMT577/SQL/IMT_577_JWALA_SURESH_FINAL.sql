/*****************************************
Course: IMT 577B
Instructor: Sean Pettersen
Assignment: Module 8
Pod: 3
Date: 05/15/2021
Notes: Create views
*****************************************/

-- SQL pass through views for dimension tables

CREATE OR REPLACE VIEW VIEW_DIM_DATE
AS
SELECT
        DATE_PKEY,
		DATE,
		FULL_DATE_DESC,
		DAY_NUM_IN_WEEK,
		DAY_NUM_IN_MONTH,
		DAY_NUM_IN_YEAR,
		DAY_NAME,
		DAY_ABBREV,
		WEEKDAY_IND,
		US_HOLIDAY_IND,
		_HOLIDAY_IND,
		MONTH_END_IND,
		WEEK_BEGIN_DATE_NKEY,
		WEEK_BEGIN_DATE,
		WEEK_END_DATE_NKEY,
		WEEK_END_DATE,
		WEEK_NUM_IN_YEAR,
		MONTH_NAME,
		MONTH_ABBREV ,
		MONTH_NUM_IN_YEAR,
		YEARMONTH,
		QUARTER,
		YEARQUARTER,
		YEAR,
		FISCAL_WEEK_NUM,
		FISCAL_MONTH_NUM,
		FISCAL_YEARMONTH,
		FISCAL_QUARTER,
		FISCAL_YEARQUARTER,
		FISCAL_HALFYEAR,
		FISCAL_YEAR,
		SQL_TIMESTAMP,
		CURRENT_ROW_IND,
		EFFECTIVE_DATE,
		EXPIRATION_DATE
FROM DIM_DATE;

SELECT * FROM VIEW_DIM_DATE;

--===================================================
-------------VIEW_DIM_CHANNEL
--==================================================

CREATE OR REPLACE VIEW VIEW_DIM_CHANNEL
AS
SELECT
    DimChannelID
    ,ChannelID
    ,ChannelCategoryID
    ,ChannelName
    ,ChannelCategory
FROM DIM_CHANNEL;

SELECT * FROM VIEW_DIM_CHANNEL;

--===================================================
-------------VIEW_DIM_CUSTOMER
--==================================================

CREATE OR REPLACE VIEW VIEW_DIM_CUSTOMER
AS
SELECT
    DimCustomerID
    ,DimLocationID
    ,CustomerID
    ,FullName
    ,FirstName
    ,LastName
    ,Gender
    ,EmailAddress
    ,PhoneNumber
FROM DIM_CUSTOMER;

SELECT * FROM VIEW_DIM_CUSTOMER;

--===================================================
-------------VIEW_DIM_LOCATION
--==================================================

CREATE OR REPLACE VIEW VIEW_DIM_LOCATION
AS
SELECT
    DimLocationID
    ,PostalCode
    ,Address
    ,City
    ,StateProvince
    ,Country
FROM DIM_LOCATION;

SELECT * FROM VIEW_DIM_LOCATION;

--===================================================
-------------VIEW_DIM_PRODUCT
--==================================================

CREATE OR REPLACE VIEW VIEW_DIM_PRODUCT
AS
SELECT
    DimProductID
    ,ProductID
    ,ProductTypeID 
    ,ProductCategoryID
    ,ProductName
    ,ProductType
    ,ProductCategory
    ,ProductColor
    ,ProductStyle
    ,ProductWeight
    ,ProductRetailPrice
    ,ProductWholesalePrice
    ,ProductCost
    ,ProductRetailProfit
    ,ProductWholesaleUnitProfit
    ,ProductProfitMarginUnitProfit
FROM DIM_PRODUCT;

SELECT * FROM VIEW_DIM_PRODUCT;
--===================================================
-------------VIEW_DIM_RESELLER
--==================================================

CREATE OR REPLACE VIEW VIEW_DIM_RESELLER
AS
SELECT
    DimResellerID
    ,DimLocationID
    ,ResellerID
    ,ResellerName
    ,ContactName
    ,PhoneNumber
    ,Email
FROM DIM_RESELLER;

SELECT * FROM VIEW_DIM_RESELLER;

--===================================================
-------------VIEW_DIM_STORE
--==================================================

CREATE OR REPLACE VIEW VIEW_DIM_STORE
AS
SELECT
    DimStoreID
    ,DimLocationID
    ,StoreID
    ,StoreNumber
    ,StoreManager
    ,PhoneNumber
FROM DIM_STORE;

SELECT * FROM VIEW_DIM_STORE;

-- SQL pass through views for fact tables

--===================================================
-------------VIEW_FACT_PRODUCTSALESTARGET
--==================================================

CREATE OR REPLACE VIEW VIEW_FACT_PRODUCTSALESTARGET
AS
SELECT
    DimProductID
   	,DimTargetDateID
    ,ProductTargetSalesQuantity
FROM FACT_PRODUCTSALESTARGET;

SELECT * FROM VIEW_FACT_PRODUCTSALESTARGET;

--===================================================
-------------VIEW_FACT_SRCSALESTARGET
--==================================================

CREATE OR REPLACE VIEW VIEW_FACT_SRCSALESTARGET
AS
SELECT
    DimStoreID
    ,DimResellerID
    ,DimChannelID
    ,DimTargetDateID
    ,SalesTargetAmount
FROM FACT_SRCSALESTARGET;

SELECT * FROM VIEW_FACT_SRCSALESTARGET;

--===================================================
-------------VIEW_FACT_SALESACTUAL
--==================================================

CREATE OR REPLACE VIEW VIEW_FACT_SALESACTUAL
AS
SELECT
	DimProductID
   	,DimStoreID
    ,DimResellerID
    ,DimCustomerID
    ,DimChannelID
    ,DimSaleDateID
	,DimLocationID
    ,SalesHeaderID
    ,SalesDetailID
    ,SalesAmount
	,SalesQuantity
	,SaleUnitPrice
	,SaleExtendedCost
	,SaleTotalProfit
FROM FACT_SALESACTUAL;

SELECT * FROM VIEW_FACT_SALESACTUAL;

-- SQL views for answering the business questions

--Q1.Give an overall assessment of stores number 10 and 21â€™s sales.

--a. How are they performing compared to target? Will they meet their 2014 target?

CREATE OR REPLACE VIEW VIEW_STORE_PERFORMANCE
AS
SELECT  
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER, 
    CHANNELNAME,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALTARGET
 FROM
(
SELECT 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER,
    CHANNELNAME,
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER,
    C.CHANNELNAME,
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_CHANNEL C ON FT.DIMCHANNELID = C.DIMCHANNELID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY <= 20141031 AND STORENUMBER IN (10,21)
GROUP BY 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER,
    C.CHANNELNAME
UNION 
SELECT 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR,  
    S.STORENUMBER,
    C.CHANNELNAME,
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES  
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_CHANNEL C ON FS.DIMCHANNELID = C.DIMCHANNELID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY <= 20141031 AND STORENUMBER IN (10,21)
GROUP BY 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER,
    C.CHANNELNAME
)
GROUP BY 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER,
    CHANNELNAME
);

SELECT * FROM VIEW_STORE_PERFORMANCE;

--b. Should either store be closed? Why or why not?

CREATE OR REPLACE VIEW VIEW_STORE_PROFIT
AS
SELECT 
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALTARGET,
    ((TOTALSALES-TOTALTARGET)/TOTALTARGET)*100 AS PERCENTAGE
FROM
(
SELECT 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER, 
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER, 
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY <=20141031 AND STORENUMBER IN (10,21)
GROUP BY 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
UNION 
SELECT 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR,  
    S.STORENUMBER, 
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY <=20141031 AND STORENUMBER IN (10,21)
GROUP BY 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
)
GROUP BY 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER
);

SELECT * FROM VIEW_STORE_PROFIT;

--c. What should be done in the next year to maximize store profits?

CREATE OR REPLACE VIEW VIEW_MAXIMIZE_STORE_PROFIT
AS
SELECT  
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTID, 
    PRODUCTNAME, 
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT,
    SALESQUANTITY, 
    SALESAMOUNT, 
    SALEUNITPRICE, 
    SALETOTALPROFIT
FROM DIM_PRODUCT P
LEFT JOIN FACT_SALESACTUAL SA ON P.DIMPRODUCTID = SA.DIMPRODUCTID
LEFT JOIN DIM_STORE S ON S.DIMSTOREID = SA.DIMSTOREID
LEFT JOIN DIM_CHANNEL C ON SA.DIMCHANNELID = C.DIMCHANNELID
LEFT JOIN DIM_DATE D ON SA.DIMSALEDATEID = D.DATE_PKEY
WHERE STORENUMBER IN (10,21)
GROUP BY 
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTID, 
    PRODUCTNAME, 
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT,
    SALESQUANTITY, 
    SALESAMOUNT, 
    SALEUNITPRICE, 
    SALETOTALPROFIT;

SELECT * FROM VIEW_MAXIMIZE_STORE_PROFIT;

--Q2. Recommend 2013 bonus amounts for each store if the total bonus pool is $2,000,000 using a comparison of 2013 actual sales vs. 2013 sales targets as the basis for the recommendation.

CREATE OR REPLACE VIEW VIEW_BONUS
AS
SELECT 
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALTARGET,
    ((TOTALSALES-TOTALTARGET)/TOTALTARGET)*100 AS PERCENTAGE
FROM
(
SELECT 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER, 
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER, 
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE YEAR = 2013 AND S.DIMSTOREID > -1
GROUP BY 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
UNION 
SELECT 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR,  
    S.STORENUMBER, 
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE YEAR = 2013 AND S.DIMSTOREID > -1
GROUP BY 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
)
GROUP BY 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER
);

SELECT * FROM VIEW_BONUS;

--Q3. Assess product sales by day of the week at stores 10 and 21. What can we learn about sales trends?

CREATE OR REPLACE VIEW VIEW_PRODUCT_SALES
AS
SELECT 
    DATE,
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    DAY_NAME,
    DAY_NUM_IN_WEEK,
    DAY_NUM_IN_MONTH,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTCATEGORY,
    PRODUCTNAME,
    PRODUCTTYPE,
    PRODUCTCOLOR,
    PRODUCTSTYLE,
    PRODUCTWEIGHT,
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT,
    SALESQUANTITY AS PRODUCTSALESQUANTITY, 
    SALESAMOUNT AS PRODUCTSALESAMOUNT 
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_CHANNEL C ON FS.DIMCHANNELID = C.DIMCHANNELID
INNER JOIN DIM_PRODUCT P ON FS.DIMPRODUCTID = P.DIMPRODUCTID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY <=20141031 AND STORENUMBER IN (10,21)
GROUP BY 
    DATE,
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    DAY_NAME,
    DAY_NUM_IN_WEEK,
    DAY_NUM_IN_MONTH,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTCATEGORY,
    PRODUCTNAME,
    PRODUCTTYPE,
    PRODUCTCOLOR,
    PRODUCTSTYLE,
    PRODUCTWEIGHT,
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT,
    SALESQUANTITY,
    SALESAMOUNT;

SELECT * FROM VIEW_PRODUCT_SALES;

--Q4 Should any new stores be opened? Include all stores in your analysis if necessary. If so, where? Why or why not?

CREATE OR REPLACE VIEW VIEW_NEW_STORES
AS
SELECT 
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER,
    POSTALCODE,
    ADDRESS,
    CITY,
    STATEPROVINCE,
    COUNTRY,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER ORDER BY MONTH_NUM_IN_YEAR ASC) AS TOTALTARGET,
   ((TOTALSALES-TOTALTARGET)/TOTALTARGET)*100 AS PERCENTAGE
FROM
(
SELECT 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER, 
    POSTALCODE,
    ADDRESS,
    CITY,
    STATEPROVINCE,
    COUNTRY,
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER, 
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY,
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_LOCATION L ON S.DIMLOCATIONID = L.DIMLOCATIONID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY <=20141031 AND S.DIMSTOREID > -1 
GROUP BY 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER,
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY
UNION
SELECT 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR,  
    S.STORENUMBER, 
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY,
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_LOCATION L ON FS.DIMLOCATIONID = L.DIMLOCATIONID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY <=20141031 AND S.DIMSTOREID > -1 
GROUP BY 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER,
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY
)
GROUP BY 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER,
    POSTALCODE,
    ADDRESS,
    CITY,
    STATEPROVINCE,
    COUNTRY
);

SELECT * FROM VIEW_NEW_STORES;