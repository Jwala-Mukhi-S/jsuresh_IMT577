/*****************************************
Course: IMT 577B
Instructor: Sean Pettersen
Assignment: Module 9
Pod: 3
Date: 05/29/2021
Notes: Views for Visualization
*****************************************/

-- SQL views for answering the business questions

--Q1.Give an overall assessment of stores number 10 and 21â€™s sales.

--a. How are they performing compared to target? Will they meet their 2014 target?

CREATE OR REPLACE SECURE VIEW STORE_SALES_VS_TARGET
AS
SELECT 
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER,MONTH_NUM_IN_YEAR,YEAR ORDER BY YEAR) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER,MONTH_NUM_IN_YEAR,YEAR ORDER BY YEAR) AS TOTALTARGET
FROM
(
SELECT 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER, 
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER, 
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE STORENUMBER != -1
GROUP BY 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
UNION 
SELECT 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR,  
    S.STORENUMBER, 
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE STORENUMBER != -1
GROUP BY 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
)
GROUP BY 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER
);

--Sales Forecast
CREATE OR REPLACE SECURE VIEW SALES_FORECAST
AS
SELECT 
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER,MONTH_NUM_IN_YEAR,YEAR ORDER BY YEAR) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER,MONTH_NUM_IN_YEAR,YEAR ORDER BY YEAR) AS TOTALTARGET
FROM
(
SELECT 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER, 
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER, 
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY<=20141031 AND STORENUMBER != -1
GROUP BY 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
UNION 
SELECT 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR,  
    S.STORENUMBER, 
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE D.DATE_PKEY<=20141031 AND STORENUMBER != -1
GROUP BY 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
)
GROUP BY 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER
);

--b. Should either store be closed? Why or why not?

CREATE OR REPLACE SECURE VIEW VIEW_STORE_PROFIT
AS
SELECT 
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    STORENUMBER,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER,MONTH_NUM_IN_YEAR,YEAR ORDER BY YEAR) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER,MONTH_NUM_IN_YEAR,YEAR ORDER BY YEAR) AS TOTALTARGET,
    ROUND(100-(((TOTALTARGET-TOTALSALES)/TOTALTARGET)*100)) AS PERCENTAGE
FROM
(
SELECT 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER, 
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER, 
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE STORENUMBER IN (10,21)
GROUP BY 
    D.YEAR,
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
UNION 
SELECT 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR,  
    S.STORENUMBER, 
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE STORENUMBER IN (10,21)
GROUP BY 
    D.YEAR, 
    D.MONTH_NAME, 
    D.MONTH_NUM_IN_YEAR, 
    S.STORENUMBER
)
GROUP BY 
    YEAR, 
    MONTH_NAME, 
    MONTH_NUM_IN_YEAR, 
    STORENUMBER
);


SELECT * FROM VIEW_STORE_PROFIT;

--c. What Should Be Done In The Next Year To Maximize Store Profits? 

CREATE OR REPLACE SECURE VIEW VIEW_PROFIT_MAX
AS
SELECT 
    DATE,
    YEAR,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTCATEGORY,
    PRODUCTNAME,
    PRODUCTTYPE,
    PRODUCTCOLOR,
    PRODUCTSTYLE,
    PRODUCTWEIGHT,
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT,
    SUM(FS.SALESQUANTITY) AS PRODUCTSALESQUANTITY, 
    SUM(FS.SALESAMOUNT) AS PRODUCTSALESAMOUNT
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_CHANNEL C ON FS.DIMCHANNELID = C.DIMCHANNELID
INNER JOIN DIM_PRODUCT P ON FS.DIMPRODUCTID = P.DIMPRODUCTID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE STORENUMBER IN (10,21)
GROUP BY 
    DATE,
    YEAR,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTCATEGORY,
    PRODUCTNAME,
    PRODUCTTYPE,
    PRODUCTCOLOR,
    PRODUCTSTYLE,
    PRODUCTWEIGHT,
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT;

SELECT * FROM VIEW_PROFIT_MAX;

--Q2. Recommend 2013 bonus amounts for each store if the total bonus pool is $2,000,000 using a comparison of 2013 actual sales vs. 2013 sales targets as the basis for the recommendation.

--VIEW 1
CREATE OR REPLACE SECURE VIEW VIEW_SALES_ACTUAL_TARGET
AS
SELECT 
    YEAR,
    STORENUMBER,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER) AS TOTALTARGET
FROM
(
SELECT 
    YEAR, 
    STORENUMBER, 
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES
FROM 
(
SELECT 
    D.YEAR,
    S.STORENUMBER, 
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE YEAR = 2013 AND S.DIMSTOREID > -1
GROUP BY 
    D.YEAR,
   S.STORENUMBER
UNION 
SELECT 
    D.YEAR, 
    S.STORENUMBER, 
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE YEAR = 2013 AND S.DIMSTOREID > -1
GROUP BY 
    D.YEAR, 
    S.STORENUMBER
)
GROUP BY 
    YEAR, 
    STORENUMBER
);

--VIEW #2
CREATE OR REPLACE SECURE VIEW VIEW_SUM_SALES_ACTUAL_TARGET
AS
SELECT YEAR, SUM(TOTALSALES) AS SUM_ACTUAL_SALES_ALL_STORES, SUM(TOTALTARGET) AS SUM_TARGET_SALES_ALL_STORES
FROM VIEW_SALES_ACTUAL_TARGET
GROUP BY YEAR;
 

-- VIEW #3
CREATE OR REPLACE SECURE VIEW VIEW_BONUS_ALLOCATION
AS
SELECT 
A.YEAR, A.STORENUMBER, A.TOTALSALES, A.TOTALTARGET,
(A.TOTALSALES * 100 / B.SUM_ACTUAL_SALES_ALL_STORES) AS PERCENT_OF_TOTAL_SALES_PER_STORE,
(A.TOTALSALES * 100 / A.TOTALTARGET) AS PERCENT_OF_TARGET_ACHIEVED,
(2000000 * (A.TOTALSALES / B.SUM_ACTUAL_SALES_ALL_STORES) * (A.TOTALSALES / A.TOTALTARGET)) AS BONUS_ALLOCATION
FROM VIEW_SALES_ACTUAL_TARGET A
LEFT JOIN
VIEW_SUM_SALES_ACTUAL_TARGET B ON A.YEAR = B.YEAR
GROUP BY A.YEAR, A.STORENUMBER, A.TOTALSALES, A.TOTALTARGET, (A.TOTALSALES * 100 / B.SUM_ACTUAL_SALES_ALL_STORES), 
(A.TOTALSALES * 100 / A.TOTALTARGET), 
(2000000 * (A.TOTALSALES / B.SUM_ACTUAL_SALES_ALL_STORES) * (A.TOTALSALES / A.TOTALTARGET)); 


--Q3. Assess product sales by day of the week at stores 10 and 21. What can we learn about sales trends?

CREATE OR REPLACE SECURE VIEW VIEW_PRODUCT_SALES
AS
SELECT 
    DATE,
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    DAY_NAME,
    DAY_NUM_IN_WEEK,
    DAY_NUM_IN_MONTH,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTCATEGORY,
    PRODUCTNAME,
    PRODUCTTYPE,
    PRODUCTCOLOR,
    PRODUCTSTYLE,
    PRODUCTWEIGHT,
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT,
    SUM(FS.SALESQUANTITY) AS PRODUCTSALESQUANTITY, 
    SUM(FS.SALESAMOUNT) AS PRODUCTSALESAMOUNT,
    SUM(FS.SALETOTALPROFIT) AS TOTALPROFIT
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_CHANNEL C ON FS.DIMCHANNELID = C.DIMCHANNELID
INNER JOIN DIM_PRODUCT P ON FS.DIMPRODUCTID = P.DIMPRODUCTID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE STORENUMBER IN (10,21)
GROUP BY 
    DATE,
    YEAR,
    MONTH_NAME,
    MONTH_NUM_IN_YEAR,
    DAY_NAME,
    DAY_NUM_IN_WEEK,
    DAY_NUM_IN_MONTH,
    STORENUMBER, 
    CHANNELNAME,
    PRODUCTCATEGORY,
    PRODUCTNAME,
    PRODUCTTYPE,
    PRODUCTCOLOR,
    PRODUCTSTYLE,
    PRODUCTWEIGHT,
    PRODUCTCOST,
    PRODUCTRETAILPRICE,
    PRODUCTRETAILPROFIT,
    PRODUCTWHOLESALEPRICE,
    PRODUCTWHOLESALEUNITPROFIT,
    PRODUCTPROFITMARGINUNITPERCENT;

SELECT * FROM VIEW_PRODUCT_SALES;

--Q4 Should any new stores be opened? Include all stores in your analysis if necessary. If so, where? Why or why not?

CREATE OR REPLACE SECURE VIEW VIEW_NEW_STORES
AS
SELECT 
    YEAR,
    STORENUMBER,
    POSTALCODE,
    ADDRESS,
    CITY,
    STATEPROVINCE AS REGION,
    COUNTRY,
    SUM(ACTUALSALES) OVER (PARTITION BY STORENUMBER,YEAR ORDER BY YEAR) AS TOTALSALES,
    SUM(ACTUALTARGET) OVER (PARTITION BY STORENUMBER,YEAR ORDER BY YEAR) AS TOTALTARGET,
    SUM(TOTALPROFIT) OVER (PARTITION BY STORENUMBER,YEAR ORDER BY YEAR) AS TOTALPROFIT,
    ROUND(100-(((TOTALTARGET-TOTALSALES)/TOTALTARGET)*100)) AS PERCENTAGE
FROM
(
SELECT 
    YEAR, 
    STORENUMBER, 
    POSTALCODE,
    ADDRESS,
    CITY,
    STATEPROVINCE,
    COUNTRY,
    SUM(ACTUALTARGET) AS ACTUALTARGET, 
    SUM(ACTUALSALES) AS ACTUALSALES,
    SUM(TOTALPROFIT) AS TOTALPROFIT
FROM 
(
SELECT 
    D.YEAR,
    S.STORENUMBER, 
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY,
    SUM(FT.SALESTARGETAMOUNT) AS ACTUALTARGET, 
    0 AS ACTUALSALES,
    0 AS TOTALPROFIT
FROM FACT_SRCSALESTARGET FT
INNER JOIN DIM_STORE S ON FT.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_LOCATION L ON S.DIMLOCATIONID = L.DIMLOCATIONID
INNER JOIN DIM_DATE D ON FT.DIMTARGETDATEID = D.DATE_PKEY
WHERE S.DIMSTOREID > -1 
GROUP BY 
    D.YEAR,
    S.STORENUMBER,
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY
UNION
SELECT 
    D.YEAR, 
    S.STORENUMBER, 
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY,
    0 AS ACTUALTARGET, 
    SUM(FS.SALESAMOUNT) AS ACTUALSALES,
    SUM(SALETOTALPROFIT) AS TOTALPROFIT
FROM FACT_SALESACTUAL FS
INNER JOIN DIM_STORE S ON FS.DIMSTOREID = S.DIMSTOREID
INNER JOIN DIM_LOCATION L ON FS.DIMLOCATIONID = L.DIMLOCATIONID
INNER JOIN DIM_DATE D ON FS.DIMSALEDATEID = D.DATE_PKEY
WHERE S.DIMSTOREID > -1 
GROUP BY 
    D.YEAR, 
    S.STORENUMBER,
    L.POSTALCODE,
    L.ADDRESS,
    L.CITY,
    L.STATEPROVINCE,
    L.COUNTRY
)
GROUP BY 
    YEAR, 
    STORENUMBER,
    POSTALCODE,
    ADDRESS,
    CITY,
    STATEPROVINCE,
    COUNTRY
);

SELECT * FROM VIEW_NEW_STORES;
